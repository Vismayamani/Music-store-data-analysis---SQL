# Who is the senior most employee based on job title?
SELECT * FROM employee
ORDER BY levels DESC
LIMIT 1

2. Which countries have the most Invoices?
SELECT billing_country, count(invoice_id) FROM invoice
GROUP BY billing_country
ORDER BY count(invoice_id) DESC

3. What are top 3 values of total invoice?
SELECT total FROM invoice
ORDER BY total DESC
LIMIT 3

4. Which city has the best customers? We would like to throw a promotional Music
Festival in the city we made the most money. Write a query that returns one city that
has the highest sum of invoice totals. Return both the city name & sum of all invoice
totals
SELECT billing_city, SUM(total) AS invoice_total  FROM invoice
GROUP BY billing_city
ORDER BY invoice_total DESC
LIMIT 3

5. Who is the best customer? The customer who has spent the most money will be
declared the best customer. Write a query that returns the person who has spent the
most money
SELECT first_name,last_name,SUM(total) AS Total FROM customer
INNER JOIN invoice
ON customer.customer_id=invoice.customer_id
GROUP BY first_name,last_name
ORDER BY Total DESC

6. Write query to return the email, first name, last name, & Genre of all Rock Music
listeners. Return your list ordered alphabetically by email starting with A
SELECT DISTINCT email,first_name,last_name FROM customer
INNER JOIN invoice ON customer.customer_id=invoice.customer_id
INNER JOIN invoice_line ON invoice.invoice_id=invoice_line.invoice_id
WHERE track_id IN(SELECT track_id FROM track
			  INNER JOIN genre ON track.genre_id=genre.genre_id
			  WHERE genre.name='Rock')
ORDER BY email;

#7. Lets invite the artists who have written the most rock music in our dataset. Write a
query that returns the Artist name and total track count of the top 10 rock bands

SELECT artist.artist_id,artist.name, COUNT(artist.artist_id) AS number_of_songs
FROM track
JOIN album ON track.album_id=track.album_id
JOIN artist ON artist.artist_id=album.artist_id
JOIN genre ON track.genre_id=genre.genre_id
WHERE genre.name LIKE 'Rock'
GROUP BY artist.artist_id
ORDER BY number_of_songs DESC
LIMIT 10

8. Return all the track names that have a song length longer than the average song length.
Return the Name and Milliseconds for each track. Order by the song length with the
longest songs listed first

SELECT name, milliseconds FROM track
WHERE milliseconds > (SELECT AVG(milliseconds) AS avg_track_length FROM track)
ORDER BY milliseconds DESC;





